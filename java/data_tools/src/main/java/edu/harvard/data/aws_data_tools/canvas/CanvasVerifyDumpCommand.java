package edu.harvard.data.aws_data_tools.canvas;

import java.io.IOException;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.kohsuke.args4j.Argument;
import org.kohsuke.args4j.Option;

import edu.harvard.data.aws_data_tools.Command;
import edu.harvard.data.aws_data_tools.ReturnStatus;
import edu.harvard.data.aws_data_tools.VerificationException;
import edu.harvard.data.aws_data_tools.Verifier;
import edu.harvard.data.aws_data_tools.canvas.phase0.CanvasPhase0Verifier;
import edu.harvard.data.aws_data_tools.canvas.phase1.CanvasPhase1Verifier;
import edu.harvard.data.aws_data_tools.canvas.phase2.CanvasPhase2Verifier;
import edu.harvard.data.client.AwsUtils;
import edu.harvard.data.client.DataConfiguration;
import edu.harvard.data.client.DataConfigurationException;
import edu.harvard.data.client.FormatLibrary;
import edu.harvard.data.client.TableFactory;
import edu.harvard.data.client.TableFormat;
import edu.harvard.data.client.canvas.phase0.CanvasTableFactory;
import edu.harvard.data.client.schema.UnexpectedApiResponseException;

public class CanvasVerifyDumpCommand implements Command {

  private static final Logger log = LogManager.getLogger();

  @Argument(index = 0, usage = "Verification phase.", metaVar = "0", required = true)
  public int phase;

  @Option(name = "dump_id", usage = "UUID for the dump, generated by the Canvas Data API. Required for phase 0.", metaVar = "uuid", required = false)
  public String dumpId;

  @Option(name = "data_dir", usage = "Location of data files. Required for phases > 0.", metaVar = "hdfs://path/to/data", required = false)
  public String dataDir;

  @Override
  public ReturnStatus execute(final DataConfiguration config)
      throws IOException, DataConfigurationException, UnexpectedApiResponseException {
    final AwsUtils aws = new AwsUtils();
    final TableFactory factory = new CanvasTableFactory();
    final FormatLibrary formats = new FormatLibrary();
    final TableFormat format = formats.getFormat(FormatLibrary.Format.CanvasDataFlatFiles);

    final Verifier verifier;
    if (phase == 0) {
      if (dumpId == null) {
        log.error("Dump ID is required for Phase 0");
        return ReturnStatus.ARGUMENT_ERROR;
      }
      verifier = new CanvasPhase0Verifier(dumpId, aws, factory, format);
    } else {
      if (dataDir == null) {
        log.error("Data directory is required for all phases other than zero.");
        return ReturnStatus.ARGUMENT_ERROR;
      }
      switch (phase) {
      case 1:
        verifier = new CanvasPhase1Verifier();
        break;
      case 2:
        verifier = new CanvasPhase2Verifier();
        break;
      default:
        log.error("Invalid phase " + phase);
        return ReturnStatus.ARGUMENT_ERROR;
      }
    }
    try {
      verifier.verify();
    } catch (final VerificationException e) {
      log.error(e);
    }
    return ReturnStatus.OK;
  }

  @Override
  public String getDescription() {
    return "Verify the file structure of a Canvas data dump.";
  }

}
