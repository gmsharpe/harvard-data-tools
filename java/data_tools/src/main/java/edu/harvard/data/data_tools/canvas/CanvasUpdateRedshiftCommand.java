package edu.harvard.data.data_tools.canvas;

import java.io.IOException;
import java.sql.SQLException;
import java.util.concurrent.ExecutorService;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.kohsuke.args4j.Argument;

import edu.harvard.data.client.AwsUtils;
import edu.harvard.data.client.DataClient;
import edu.harvard.data.client.DataConfiguration;
import edu.harvard.data.client.DataConfigurationException;
import edu.harvard.data.client.UpdateRedshift;
import edu.harvard.data.client.canvas.CanvasApiClient;
import edu.harvard.data.client.canvas.CanvasDataGenerator;
import edu.harvard.data.client.generator.SchemaTransformer;
import edu.harvard.data.client.schema.DataSchema;
import edu.harvard.data.client.schema.UnexpectedApiResponseException;
import edu.harvard.data.data_tools.Command;
import edu.harvard.data.data_tools.DumpInfo;
import edu.harvard.data.data_tools.ReturnStatus;
import edu.harvard.data.data_tools.VerificationException;

public class CanvasUpdateRedshiftCommand implements Command {
  private static final Logger log = LogManager.getLogger();

  @Argument(index = 0, usage = "UUID for the current dump, generated by the Canvas Data API.", metaVar = "uuid", required = false)
  public String dumpId;

  @Override
  public ReturnStatus execute(final DataConfiguration config, final ExecutorService exec)
      throws IOException, UnexpectedApiResponseException, DataConfigurationException,
      VerificationException {
    final AwsUtils aws = new AwsUtils();
    final CanvasApiClient api = DataClient.getCanvasApiClient(config.getCanvasDataHost(),
        config.getCanvasApiKey(), config.getCanvasApiSecret());
    final DumpInfo info = DumpInfo.find(dumpId);
    final DataSchema schema = api.getSchema(info.getSchemaVersion());

    final SchemaTransformer transformer = new SchemaTransformer(3);
    transformer.setSchemas(schema, CanvasDataGenerator.PHASE_ONE_ADDITIONS_JSON,
        CanvasDataGenerator.PHASE_TWO_ADDITIONS_JSON);
    try {
      new UpdateRedshift(transformer.getLastPhase().getSchema()).update(aws, config);
    } catch (final SQLException e) {
      log.fatal("Error while updating Redshift schema", e);
      return ReturnStatus.IO_ERROR;
    }
    return ReturnStatus.OK;
  }

  @Override
  public String getDescription() {
    return "Update the schema in Redshift to match the current transformed schema";
  }

}
